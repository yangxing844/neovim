global !p
def math(): 
	return vim.eval('vimtex#syntax#in_mathzone()') == '1' 
def comment():  
	return vim.eval('vimtex#syntax#in_comment()') == '1' 
def env(name): 
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")  
	return x != '0' and x != '0' 

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal


priority 10
context "math()"
snippet "\bhat" "hat" riA
\hat{$1}$0
endsnippet

snippet '\bbr' "conjugate" ir
\bar{$1} $0
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\bm{`!p snip.rv=match.group(1)`}
endsnippet 


context "math()"
snippet hb "Description" wiA
\hbar
endsnippet


context "math()"
snippet '(\|)([\s\S]+)>' "ket operator" wr
\ket{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '<([\s\S]+)(\|)' "bra operator" wr
\bra{`!p snip.rv = match.group(1)`}
endsnippet

priority 100
context "math()"
snippet '<([\s\S]+)(\|)([\s\S]+)>' "bra operator" wr
\braket{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(3)`}
endsnippet

context "math()" 
snippet '\|([\s\S]+)\|' "absolute operator" wr
\abs{`!p snip.rv=match.group(1)`}
endsnippet
priority 200
context "math()"
snippet '<([\s\S]+)(\|)([\s\S]+)(\|)([\s\S]+)>' "bra operator" wr
\mel**{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(3)`}{`!p snip.rv = match.group(5)`}
endsnippet

snippet lb "inserting a label" i
\\label{${1:eq:}${2:fig:}${3:tab:}}${0}
endsnippet


snippet dv "Derivative" w
\dv{${1}}{${2}}$0
endsnippet

snippet pdv "Partial Derivative" w
\pdv{${1}}{${2}}$0
endsnippet

snippet SI "SI-Unit" w
\SI{${1:${VISUAL}}}{${2}}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

priority 1000
pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}%
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet


snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet


snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet


snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

${0}
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\acs{${1:${VISUAL}}}
$0
endsnippet

snippet acl "Acroynm expanded" iA
\acl{${1:${VISUAL}}}$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

snippet gln "New glossary item" b
\newglossaryentry{${1:identifier}}
{
	name={${2:name}},
	first={${3:first occurrence}},
	sort={${4:sort value}},
	description={${0:description}},
}
endsnippet

snippet glnl "New long glossary item" b
\longnewglossaryentry{${1:identifier}}
{
	name={${2:name}},
	first={${3:first occurrence}},
	sort={${4:sort value}},
}
{
	${0:description}
}
endsnippet

# Underlined text
snippet udl "Underline"
\underline{$1} $0
endsnippet

snippet ali "align(ed) environment" w
\begin{align${1:ed}} 
${0:${VISUAL}}
\end{align$1}
endsnippet

snippet gat "agther(ed) environment" w
\begin{gather${1:ed}} 
${0:${VISUAL}}
\end{gather$1}
endsnippet


snippet eql "equation enviroment" b
\begin{equation}\label{${1}}
${2:${VISUAL}}
\end{equation}
$0
endsnippet

snippet eq "equation enviroment" b
\begin{equation}
${1:${VISUAL}}
\end{equation}
$0
endsnippet

snippet tb "text bold" w
\textbf{${1:${VISUAL}}} $0
endsnippet

snippet em "text emphasis" w
\emph{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ms "math bold" w
\mathscr{${1:${VISUAL}}}$0
endsnippet

context "math()" 
snippet tt "text in math mode" w
\text{$1}$0
endsnippet

# vim:ft=snippets
