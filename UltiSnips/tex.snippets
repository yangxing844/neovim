global !p
texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
texIgnoreMathZones = ['texMathTextArg']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration: 
		return False 
endglobal

snippet template "Basic template" b
\documentclass[a4paper]{article}
\usepackage{textcomp}
\usepackage{fontspec}
\usepackage{ctex}
\setCJKmainfont{Noto Serif CJK SC}
\usepackage{amsmath, amssymb}
\usepackage{physics}
\usepackage{graphicx}
% \usepackage{siunitx}
% \usepackage{hyperref}
% \hypersetup{
%     colorlinks=true,
%     linkcolor=blue,
%     filecolor=magenta,      
%     urlcolor=cyan,
% }
% \usepackage{xcolor} % color for texts
% \usepackage{caption} % no numbring
% \usepackage{import,xifthen,pdfpages} % inkscape drawing
% \usepackage{float} % H for located position
% \usepackage{titlesec}
% \titlespacing{\section}{-3pc}{1.5ex plus .1ex minus .2ex}{0pc}
% \usepackage{tikz,personal}
\begin{document}
	$1
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption*{$4}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage${1:[options]}{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\]
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\dfrac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\dfrac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\dfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\dfrac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z]|\})\.(\w+)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`$0
endsnippet

context "math()"
snippet '([A-Za-z]|\})(\d+)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\pdv{${1:V}}{${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet df "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet fd "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty $0
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le $0
endsnippet

snippet >= "geq" iA
\ge $0
endsnippet

context "math()"
snippet EE "geq" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet


context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet


priority 100
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet int "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`$0
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \ "setminus" i
\setminus 
endsnippet

snippet >> ">>" iA
\gg 
endsnippet

snippet << "<<" iA
\ll 
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
\mid 
endsnippet

snippet notin "not in " iA
\not\in
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap
endsnippet

snippet UU "cup" iA
\cup
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet <! "normal" iA
\triangleleft
endsnippet

context "math()"
snippet case "cases" bA
\begin{cases}
	$1
\end{cases} $0
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet


priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

snippet cl "" i
{\color{$1}{${2:${VISUAL:default}}}}$0
endsnippet

snippet lab "Description" b
${VISUAL:default} \label{${VISUAL:default}}$0
endsnippet

context "math()"
snippet qw "mathrm" iA
\mathrm{$1}$0
endsnippet

context "math()"
snippet vp "Description" iA
\varphi$0
endsnippet

context "math()"
snippet l; "Description" iA
\lambda$0
endsnippet

context "math()"
snippet t; "Description" iA
\theta$0
endsnippet

context "math()"
snippet e; "varspsilon" iA
\varepsilon$0
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}$0
endsnippet 

context "math()"
snippet d; "Description" iA
\delta$0
endsnippet

context "math()"
snippet hb "Description" iA
\hbar$0
endsnippet

snippet Sch "Description" i
Schr\"{o}dinger$0
endsnippet

context "math()"
snippet w; "Description" iA
\omega$0
endsnippet

snippet a; "alpha" iA
\alpha$0
endsnippet

snippet titlepage "titlepapge" bA
	\begin{titlepage}
	\centering
	{\scshape\LARGE 电动力学习题\par}
	\vspace{1cm}
	{\huge\bfseries 第一章\par}
	\vspace{2cm}
	{\Large\itshape 杨星\-181840292\par}
	\vfill
	{\large 2020年9月10号\par}
\end{titlepage}
endsnippet

snippet head "Description" b
{\itshape{\textbf{$1}}}$0
endsnippet

snippet bold "Description" i
\textbf{$1}$0
endsnippet

context "math()"
snippet s; "Description" iA
\sigma$0
endsnippet

context "math()"
snippet C "Constant" wb
\dfrac{1}{4\pi \varepsilon_0}$0
endsnippet

context "math()"
snippet '([A-Za-z]+)x([A-Za-z]+)' "Levi-Civita Symbol" wr
`!p snip.rv = match.group(1)`_{$1}`!p snip.rv = match.group(2)`_{$2}-`!p snip.rv = match.group(2)`_{$2}`!p snip.rv = match.group(1)`_{$1} $0
endsnippet

snippet adw "Description" bA
\begin{adjustwidth}{-1cm}{-2cm}
$1
\end{adjustwidth}
endsnippet 

context "math()"
snippet 'curl([A-Za-z])' "curl of something" wr
\pdv[2]{`!p snip.rv = match.group(1)`_{$2}}{$1}-\pdv[2]{`!p snip.rv = match.group(1)`_{$1}}{$2}$0
endsnippet

snippet g; "\gamma" iA
\gamma$0
endsnippet

context "math()"
snippet '(\|)([\s\S]+)>' "Description" wrA
\ket{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '<([\s\S]+)(\|)' "Description" wrA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

snippet b;  "\beta" iA
\beta$0
endsnippet

snippet f; "phi" iA
\phi$0
endsnippet

snippet k; "Description" iA
\kappa$0
endsnippet

snippet T; "Description" iA
\Theta$0
endsnippet
# vim:ft=snippets
