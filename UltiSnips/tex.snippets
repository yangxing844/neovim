global !p
def math(): 
	return vim.eval('vimtex#syntax#in_mathzone()') == '1' 
def comment():  
	return vim.eval('vimtex#syntax#in_comment()') == '1' 
def env(name): 
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")  
	return x != '0' and x != '0' 
endglobal

snippet template "Basic template" b
% !Mode:: "TeX:UTF-8"
% !TEX program  = xelatex
\documentclass[a4paper]{article}
\usepackage{textcomp}
\usepackage{fontspec}
%\usepackage[inlimits]{amsmath,
%\usepackage{amssymb}
\usepackage{physics}
\usepackage{graphicx}
% \usepackage{siunitx}
% \usepackage{hyperref}
% \hypersetup{
%     colorlinks=true,
%     linkcolor=blue,
%     filecolor=magenta,      
%     urlcolor=cyan,
% }
% \usepackage{xcolor} % color for texts
% \usepackage{caption} % no numbring
% \usepackage{import,xifthen,pdfpages} % inkscape drawing
% \usepackage{float} % H for located position
% \usepackage{titlesec}
% \titlespacing{\section}{-3pc}{1.5ex plus .1ex minus .2ex}{0pc}
% \usepackage{tikz,personal}
\begin{document}
	$0
\end{document}
endsnippet

snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "displayed math" wA
\[
${1:${VISUAL}}
\]
endsnippet


context "math()"
snippet // "Fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet nfr "nicefrac" iA
\nicefrac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '([^$=()+-/\s-]+)/' "symbol frac" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z]|\}|\))\.(\w+)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`$0
endsnippet

context "math()"
snippet '([A-Za-z]|\}|\))(\d+)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`^`!p snip.rv = match.group(2)`$0
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet == "equals" iA
&= $1 
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" wA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet _ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty $0
endsnippet

context "math()"
snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet <= "leq" iA
\le $0
endsnippet

context "math()"
snippet >= "geq" iA
\ge $0
endsnippet


snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet int "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`$0
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet \ "setminus" i
\setminus 
endsnippet

snippet >> ">>" iA
\gg 
endsnippet

snippet << "<<" iA
\ll 
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet case "cases" bA
\begin{cases}
	$1
\end{cases} $0
endsnippet


priority 10
context "math()"
snippet "\bhat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "(\b)([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(2)`}
endsnippet

context "math()"
snippet rm "mathrm" iA
\mathrm{$1}$0
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\bm{`!p snip.rv=match.group(1)`}$0
endsnippet 

context "math()"
snippet '\bhb' "Description" irA
\hbar
endsnippet

context "math()"
snippet '([A-Za-z]+)x([A-Za-z]+)' "Levi-Civita Symbol" wr
`!p snip.rv = match.group(1)`_{$1}`!p snip.rv = match.group(2)`_{$2}-`!p snip.rv = match.group(2)`_{$2}`!p snip.rv = match.group(1)`_{$1} $0
endsnippet

context "math()"
snippet '(\|)([\s\S]+)>' "ket operator" wrA
\ket{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet '<([\s\S]+)(\|)' "bra operator" wrA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

snippet textnomeaning "some text without a meaning" b
Hello, here is some text without a meaning.  This text should show
what a printed text will look like at this place. If you read this
text, you will get no information. Really? Is there no information?
Is there a difference between this text and some nonsense like
‘‘Huardest gefburn’’? Kjift -- not at all! A blind text like this
gives you information about the selected font, how the letters are
written and an impression of the look.
endsnippet
	

snippet ... "dots in context" iA
\dots
endsnippet

# vim:ft=snippets
